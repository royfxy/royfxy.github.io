<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FXY.ONE</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fxy.one/"/>
  <updated>2019-07-17T07:28:14.143Z</updated>
  <id>https://fxy.one/</id>
  
  <author>
    <name>Roy Fu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式回溯引发的灾难</title>
    <link href="https://fxy.one/2019/07/16/RegularExpressionBacktracking/"/>
    <id>https://fxy.one/2019/07/16/RegularExpressionBacktracking/</id>
    <published>2019-07-16T04:44:04.289Z</published>
    <updated>2019-07-17T07:28:14.143Z</updated>
    
    <content type="html"><![CDATA[<p>如果你尝试用正则表达式解决一个问题，那么恭喜，现在你有两个问题了。</p><a id="more"></a><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>今年 7 月 2 日，<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">Cloudflare</a> 发生了一次大规模的宕机，许多使用了 Cloudflare 服务的网站出现 <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_errors" target="_blank" rel="noopener">502</a> 错误，持续了大约半小时。</p><blockquote><p>安纳金带领的 <a href="https://starwars.fandom.com/wiki/501st_Legion" target="_blank" rel="noopener">501</a> 军团</p><p><img src="/images/RegularExpressionBacktracking/anakin501.png" alt="501"></p></blockquote><blockquote><p>本次受影响网站出现的 <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_errors" target="_blank" rel="noopener">502</a> 页面</p><p><img src="/images/RegularExpressionBacktracking/502Page.png" alt="502Page"></p></blockquote><p>宕机的元凶是 <del>@带带大师兄</del> Cloudflare 在测试的一个新添加到 <a href="https://en.wikipedia.org/wiki/Web_application_firewall" target="_blank" rel="noopener">WAF</a> 规则集中的正则表达式，它极容易产生回溯，不巧 Cloudflare WAF 的 CPU 使用保护机制失效，导致在测试时正则表达式引擎消耗了大量计算资源，几乎榨干了了负责处理 HTTP/HTTPS 流量的 CPU。</p><hr><h2 id="正则表达式的回溯"><a href="#正则表达式的回溯" class="headerlink" title="正则表达式的回溯"></a>正则表达式的回溯</h2><blockquote><p><del>什么是正则表达式的回溯？正则表达式的回溯有什么用？怎么才能让正则表达式发生回溯？正则表达式的回溯为什么会耗尽 CPU 资源？小编今天来解答一下大家有关正则表达式的回溯的困惑。</del></p></blockquote><p>这是导致这次宕机的正则表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?:(?:\&quot;|&apos;|\]|\&#125;|\\|\d|(?:nan|infinity|true|false|null|undefined|symbol|math)|\`|\-|\+)+[)]*;?((?:\s|-|~|!|&#123;&#125;|\|\||\+)*.*(?:.*=.*)))</span><br></pre></td></tr></table></figure><p>先别急着关掉网页，尽管它看起来非常长，我们需要关注的仅是其中的一小段关键部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.*(?:.*=.*)</span><br></pre></td></tr></table></figure><p><code>(?:</code>和<code>)</code>表示它们中间是一个<em>非捕获组</em>，意思是两个括号间的内容需要匹配，但在匹配之后会被扔掉。由于我们关注的是匹配的过程，此处的<code>(?:</code>和<code>)</code>也可以被忽略，最终化简后的表达式是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.*.*=.*</span><br></pre></td></tr></table></figure><p>它从表面看上去非常简单，<code>.</code>表示匹配一个任意字符，<code>.*</code>即表示匹配零个或多个任意字符。因此上述表达式先匹配<strong>零个到多个任意字符</strong>，然后又匹配<strong>零个到多个任意字符</strong>，再匹配一个<strong>等于符号<code>=</code></strong>，最后再匹配<strong>零个到多个任意字符</strong>。如下图所示。</p><br><p><img src="/images/RegularExpressionBacktracking/CloudflareNFA01.png" alt="NFA"></p><br><p>这个看似人畜无害的正则表达式，又是如何走向吃尽计算资源的深渊的呢？</p><br><h4 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h4><p>正则表达式默认使用贪婪匹配原则匹配字符串，也就是说，<code>.*</code>会尽可能多地匹配字符。</p><p>我们以字符串<code>x=x</code>为例。</p><p>第一次尝试时，为首的<code>.*</code>会匹配整个<code>x=x</code>，接着第二个<code>.*</code>只能匹配零个字符。而到了匹配<code>=</code>时，由于剩余的字符串已经空了，它找不到那个对应的<code>=</code>，匹配失败。</p><p>此时正则表达式引擎开始回溯，进行第二次尝试。第一个<code>.*</code>现在仅匹配字符串中的前两个字符<code>x=</code>，第二个贪婪的<code>.*</code>将剩下的<code>x</code>匹配掉了，<code>=</code>仍然只能面对一个空字符串，匹配失败。</p><p>现在两个<code>.*</code>依次匹配了<code>x=</code>和<code>x</code>，引擎会选择后者进行回溯，那么第三次尝试，前一个<code>.*</code>匹配<code>x=</code>，后一个<code>.*</code>匹配零个字符，留给<code>=</code>的，只剩一个<code>x</code>，匹配又失败了。</p><p>第四次尝试，<code>.*</code>只匹配<code>x</code>，然而后一个贪婪的<code>.*</code>又把<code>=x</code>吃掉了，<code>=</code>还是只能面对一个空字符串。匹配失败。</p><p>按照同样的原理，又经历了两轮回溯之后，终于前一<code>.*</code>只匹配<code>x</code>，后一<code>.*</code>匹配零个字符串，<code>=</code>才得以匹配成功，最后一个<code>.*</code>匹配末尾的<code>x</code>，整个正则表达式匹配完成。</p><p>全部过程由下图表示。</p><p><img src="/images/RegularExpressionBacktracking/backtracks.png" alt="backtracks"></p><p>仅一个包含三个字符的字符串，就要进行 5 次回溯，共 23 步的匹配过程，同时显然，匹配步骤的数量是随等号后的字符数量呈指数级上升的，当匹配<code>x=xx</code>时，需要 33 步，匹配<code>x=xxxxxxxxxxxxxxxxxxxx</code>需要 555 步。</p><blockquote><p>你可以到 <a href="https://metacpan.org/pod/Regexp::Debugger" target="_blank" rel="noopener">Perl Regexp::Debugger</a> 直观地查看正则表达式引擎如何回溯。下图展示了<code>x=x</code>的匹配过程。</p><p><img src="/images/RegularExpressionBacktracking/backtrackingSteps.gif" alt="backtracking steps"></p><p><sub style="color:grey">来源：Cloudflare</sub></p></blockquote><br><h4 id="懒惰匹配"><a href="#懒惰匹配" class="headerlink" title="懒惰匹配"></a>懒惰匹配</h4><p>懒惰匹配能在一定程度上解决上述问题。与贪婪匹配正好相反，懒惰匹配原则会尽量匹配更少的字符，下图直观展示了贪婪匹配与懒惰匹配两种策略下，正则表达式<code>.*b.*</code>匹配字符串<code>ababa</code>的区别。</p><p><img src="/images/RegularExpressionBacktracking/greedyAndLazy.png" alt="difference between greedy and lazy"></p><br><p>要在默认使用贪婪匹配的引擎中声明使用懒惰匹配原则，只需要将<code>.*</code>替换为<code>.*?</code>。声明使用懒惰匹配原则后，<code>.*?.*?=.*?</code>匹配字符串<code>x=x</code>从 23 步减少到了 11 步，与匹配<code>x=xxxxxxxxxxxxxxxxxxxx</code>一致。</p><br><p>尽管懒惰匹配原则能够解决此次导致 Cloudflare 宕机的这个<strong>特定形式的正则表达式</strong>，但其仍然存在潜在的回溯问题。</p><p>如果我们将正则表达式末尾添加一个分号，改写为<code>.*.*=.*;</code>，或申明懒惰匹配的写法<code>.*?.*?=.*?;</code>，两者在处理匹配失败的字符串时所需要的步数是相同的，如<code>x=x</code>都需要耗费 90 步才能知道匹配失败，而<code>x=</code>后面有 20 个 <code>x</code>时，从原来 555 步增加到了惊人的 5353 步。</p><blockquote><p>下图展示了引擎是如何走了 5353 步才发现<code>x=xxxxxxxxxxxxxxxxxxxx</code>匹配失败的。</p><p><img src="/images/RegularExpressionBacktracking/5353.gif" alt="backtracking steps"></p><p><sub style="color:grey">来源：Cloudflare</sub></p></blockquote><br><h4 id="真正的解决方法"><a href="#真正的解决方法" class="headerlink" title="真正的解决方法"></a>真正的解决方法</h4><p>通过改写正则表达式本身消除回溯的方法并不能一劳永逸地解决问题，由于正则表达式本身可读性差，无法指望人工完全消除隐含的回溯。尽管存在相应检测工具，但其一般靠随机数据暴力穷举，费时费力。要完全消除回溯带来的性能问题需要从正则表达式引擎本身入手。</p><p>好在 1968 年，<a href="https://en.wikipedia.org/wiki/Ken_Thompson" target="_blank" rel="noopener">Ken Thompson</a> 发表的一篇论文 <a href="https://dl.acm.org/citation.cfm?doid=363347.363387" target="_blank" rel="noopener">Programming Techniques: Regular expression search algorithm</a> 提出了解决办法。这篇论文阐述了一种将正则表达式转换为非确定性有穷自动机（NFA）的方法，然后根据在 NFA 中状态的转换，实现正则表达式的匹配。即使是带有回溯的正则表达式的匹配过程，这种算法的时间复杂度与字符串长度也仅呈线性关系。</p><p>下面仍以<code>.*.*=.*</code>匹配<code>x=x</code>为例。</p><p>先在每一个符号之间添加一个状态，匹配的过程就是状态之间的转移，画出 NFA 如下：</p><p><img src="/images/RegularExpressionBacktracking/NFA01.png" alt="NFA01"></p><br><p>状态 0 为初始状态，状态 4 为结束状态（接受状态）。若状态 m 和 n 之间存在没有符号的有向线段，则称它们之间存在 ε 转换，表示状态 m 无需任何输入即可转移到状态 n。那么对于正则表达式<code>.*.*=.*</code>的 NFA，一开始所处的状态可以是 0, 1 和 2：</p><p><img src="/images/RegularExpressionBacktracking/NFA02.png" alt="NFA02"></p><br><p>现在考虑输入的第一个字符<code>x</code>，读取<code>x</code>后，状态 0 能转移到状态 1，状态 1 能转移到状态 2，由于状态 2 到 3 需要一个<code>=</code>，无法完成转移，那么，转移后的状态就是 1 和 2。又因为状态 1 和 2 到状态 0 都存在 ε 转换，因此，读取了字符<code>x</code>后的状态仍然是 0, 1 和 2：</p><p><img src="/images/RegularExpressionBacktracking/NFA02.png" alt="NFA02"></p><br><p>现在考虑接下来的等号<code>=</code>，同理，状态 0 和 1 分别转移到状态 1 和 2，而状态 2 读取了<code>=</code>可以转移到状态 3，又由于状态 1, 2 到状态 0、状态 3 到状态 4 都有 ε 转换，因此，读取了字符<code>=</code>后的状态是 0, 1, 2, 3 和 4：</p><p><img src="/images/RegularExpressionBacktracking/NFA03.png" alt="NFA03"></p><br><p>末位的字符<code>x</code>的读取过程不再赘述，当所有字符读取完毕，可达的状态有 0, 1, 2, 3 和 4，其中包含了接受状态 4，即正则表达式能够成功匹配该字符串。</p><p>利用 NFA 来匹配<code>x=x</code>，过程中没有回溯，每个字符仅被处理了一遍，因此匹配所耗费的时间是与字符数量线性相关的。将正则表达式引擎改为此方法来匹配字符串，就可以避免因回溯带来的大量资源消耗，不重蹈 Cloudflare  的覆辙。</p><br><hr><p>原文来自 <a href="https://blog.cloudflare.com/details-of-the-cloudflare-outage-on-july-2-2019/#appendix-about-regular-expression-backtracking" target="_blank" rel="noopener">Details of the Cloudflare outage on July 2, 2019 - Appendix: About Regular Expression Backtracking</a>，有改动。</p><p>本文适用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">CC BY-NC-SA 4.0</a> 协议。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你尝试用正则表达式解决一个问题，那么恭喜，现在你有两个问题了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>欢迎！</title>
    <link href="https://fxy.one/2019/07/16/hello-world/"/>
    <id>https://fxy.one/2019/07/16/hello-world/</id>
    <published>2019-07-16T03:05:17.854Z</published>
    <updated>2019-07-16T12:37:52.636Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的个人博客</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到我的个人博客&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
